#define BOOST_TEST_MODULE MesherGreedy
#include <boost/test/included/unit_test.hpp>

#include <algorithm>
#include <array>
#include <functional>
#include <iostream>
#include <ostream>

#include "chunk.h"
#include "chunk_generator.h"
#include "constants.h"
#include "mesher_greedy.h"

BOOST_AUTO_TEST_CASE(computeChunkMeshFlat) {
  glm::vec3 pos = glm::vec3(0.0f, 0.0f, 0.0f);
  std::function<std::array<Block, CHUNK_SIZE_CUBED>()> func = ChunkGenerator::flat;
  Chunk chunk = Chunk(pos, func);

  std::vector<std::pair<quad, BlockType>> actual { MesherGreedy::computeChunkMesh(chunk) };

  std::vector<std::pair<quad, BlockType>> expected {
    // X constant (-CHUNK_SIZE_HALVED), Then Y changes (-1, 0), Then Z changes (-CHUNK_SIZE_HALVED, CHUNK_SIZE)
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Same, but X = CHUNK_SIZE_HALVED
    std::make_pair(quad{
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Y constant (-1), Then Z changes (-CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED), Then X changes (CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED)
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Same, but Y = 0
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Z constants (-CHUNK_SIZE_HALVED), Then X changes (-CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED), Then Y changes (-1, 0)
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Same, but Z = CHUNK_SIZE_HALVED
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),
  };

  BOOST_TEST(std::is_permutation(actual.begin(), actual.end(), expected.begin()));
}

BOOST_AUTO_TEST_CASE(computeChunkMeshFlatHalfAndHalf) {
  glm::vec3 pos = glm::vec3(0.0f, 0.0f, 0.0f);
  std::function<std::array<Block, CHUNK_SIZE_CUBED>()> func = ChunkGenerator::flatHalfAndHalf;
  Chunk chunk = Chunk(pos, func);

  std::vector<std::pair<quad, BlockType>> actual { MesherGreedy::computeChunkMesh(chunk) };

  std::vector<std::pair<quad, BlockType>> expected {
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    std::make_pair(quad{
      0, -1, -CHUNK_SIZE_HALVED,
      0, 0, -CHUNK_SIZE_HALVED,
      0, -1, CHUNK_SIZE_HALVED,
      0, 0, CHUNK_SIZE_HALVED
    }, BlockType::STONE),

    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      0, -1, -CHUNK_SIZE_HALVED,
      0, -1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    std::make_pair(quad{
      0, -1, -CHUNK_SIZE_HALVED,
      0, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED
    }, BlockType::STONE),

    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      0, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      0, 0, -CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    std::make_pair(quad{
      0, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      0, 0, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED
    }, BlockType::STONE),

    std::make_pair(quad{
      0, -1, -CHUNK_SIZE_HALVED,
      0, 0, -CHUNK_SIZE_HALVED,
      0, -1, CHUNK_SIZE_HALVED,
      0, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    std::make_pair(quad{
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::STONE),

    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED,
      0, 0, -CHUNK_SIZE_HALVED,
      0, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    std::make_pair(quad{
      0, 0, -CHUNK_SIZE_HALVED,
      0, 0, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::STONE),

    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      0, -1, CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED,
      0, 0, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    std::make_pair(quad{
      0, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      0, 0, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, 0, CHUNK_SIZE_HALVED
    }, BlockType::STONE),
  };

  BOOST_TEST(std::is_permutation(actual.begin(), actual.end(), expected.begin()));
}

BOOST_AUTO_TEST_CASE(computeChunkMeshFilled) {
  glm::vec3 pos = glm::vec3(0.0f, 0.0f, 0.0f);
  std::function<std::array<Block, CHUNK_SIZE_CUBED>()> func = ChunkGenerator::filled;
  Chunk chunk = Chunk(pos, func);

  std::vector<std::pair<quad, BlockType>> actual { MesherGreedy::computeChunkMesh(chunk) };

  std::vector<std::pair<quad, BlockType>> expected {
    // Left face: X constant (-CHUNK_SIZE_HALVED), Then Y changes (-1, 0), Then Z changes (-CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED)
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Right face: Same, but X = CHUNK_SIZE_HALVED
    std::make_pair(quad{
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Bottom face: Y constant (-1), Then Z changes (-CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED), Then X changes (CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED)
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Top face: Same, but Y = 0
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Back face: Z constants (-CHUNK_SIZE_HALVED), Then X changes (-CHUNK_SIZE_HALVED, CHUNK_SIZE_HALVED), Then Y changes (-1, 0)
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, -CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, -CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, -CHUNK_SIZE_HALVED
    }, BlockType::DIRT),

    // Front face: Same, but Z = CHUNK_SIZE_HALVED
    std::make_pair(quad{
      -CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, -1, CHUNK_SIZE_HALVED,
      -CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, CHUNK_SIZE_HALVED,
      CHUNK_SIZE_HALVED, CHUNK_SIZE - 1, CHUNK_SIZE_HALVED
    }, BlockType::DIRT),
  };

  BOOST_TEST(std::is_permutation(actual.begin(), actual.end(), expected.begin()));
}

BOOST_AUTO_TEST_CASE(computeChunkMeshHalfSphere) {
  glm::vec3 pos = glm::vec3(0.0f, 0.0f, 0.0f);
  std::function<std::array<Block, CHUNK_SIZE_CUBED>()> func = ChunkGenerator::halfSphere;
  Chunk chunk = Chunk(pos, func);
  std::vector<std::pair<quad, BlockType>> actual { MesherGreedy::computeChunkMesh(chunk) };
  std::vector<std::pair<quad, BlockType>> expected {
    std::make_pair(quad{-13, 6, -2, -13, 7, -2, -13, 6, 3, -13, 7, 3}, BlockType::DIRT),
    std::make_pair(quad{-12, 6, -5, -12, 7, -5, -12, 6, -2, -12, 7, -2}, BlockType::DIRT),
    std::make_pair(quad{-12, 5, -3, -12, 6, -3, -12, 5, 4, -12, 6, 4}, BlockType::DIRT),
    std::make_pair(quad{-12, 6, 3, -12, 7, 3, -12, 6, 6, -12, 7, 6}, BlockType::DIRT),
    std::make_pair(quad{-11, 6, -7, -11, 7, -7, -11, 6, -5, -11, 7, -5}, BlockType::DIRT),
    std::make_pair(quad{-11, 5, -5, -11, 6, -5, -11, 5, -3, -11, 6, -3}, BlockType::DIRT),
    std::make_pair(quad{-11, 4, -3, -11, 5, -3, -11, 4, 4, -11, 5, 4}, BlockType::DIRT),
    std::make_pair(quad{-11, 5, 4, -11, 6, 4, -11, 5, 6, -11, 6, 6}, BlockType::DIRT),
    std::make_pair(quad{-11, 6, 6, -11, 7, 6, -11, 6, 8, -11, 7, 8}, BlockType::DIRT),
    std::make_pair(quad{-10, 6, -8, -10, 7, -8, -10, 6, -7, -10, 7, -7}, BlockType::DIRT),
    std::make_pair(quad{-10, 5, -7, -10, 6, -7, -10, 5, -5, -10, 6, -5}, BlockType::DIRT),
    std::make_pair(quad{-10, 4, -5, -10, 5, -5, -10, 4, -3, -10, 5, -3}, BlockType::DIRT),
    std::make_pair(quad{-10, 3, -3, -10, 4, -3, -10, 3, 4, -10, 4, 4}, BlockType::DIRT),
    std::make_pair(quad{-10, 4, 4, -10, 5, 4, -10, 4, 6, -10, 5, 6}, BlockType::DIRT),
    std::make_pair(quad{-10, 5, 6, -10, 6, 6, -10, 5, 8, -10, 6, 8}, BlockType::DIRT),
    std::make_pair(quad{-10, 6, 8, -10, 7, 8, -10, 6, 9, -10, 7, 9}, BlockType::DIRT),
    std::make_pair(quad{-9, 6, -9, -9, 7, -9, -9, 6, -8, -9, 7, -8}, BlockType::DIRT),
    std::make_pair(quad{-9, 5, -8, -9, 6, -8, -9, 5, -7, -9, 6, -7}, BlockType::DIRT),
    std::make_pair(quad{-9, 4, -7, -9, 5, -7, -9, 4, -5, -9, 5, -5}, BlockType::DIRT),
    std::make_pair(quad{-9, 3, -5, -9, 4, -5, -9, 3, -3, -9, 4, -3}, BlockType::DIRT),
    std::make_pair(quad{-9, 2, -2, -9, 3, -2, -9, 2, 3, -9, 3, 3}, BlockType::DIRT),
    std::make_pair(quad{-9, 3, 4, -9, 4, 4, -9, 3, 6, -9, 4, 6}, BlockType::DIRT),
    std::make_pair(quad{-9, 4, 6, -9, 5, 6, -9, 4, 8, -9, 5, 8}, BlockType::DIRT),
    std::make_pair(quad{-9, 5, 8, -9, 6, 8, -9, 5, 9, -9, 6, 9}, BlockType::DIRT),
    std::make_pair(quad{-9, 6, 9, -9, 7, 9, -9, 6, 10, -9, 7, 10}, BlockType::DIRT),
    std::make_pair(quad{-8, 6, -10, -8, 7, -10, -8, 6, -9, -8, 7, -9}, BlockType::DIRT),
    std::make_pair(quad{-8, 5, -9, -8, 6, -9, -8, 5, -8, -8, 6, -8}, BlockType::DIRT),
    std::make_pair(quad{-8, 4, -8, -8, 5, -8, -8, 4, -7, -8, 5, -7}, BlockType::DIRT),
    std::make_pair(quad{-8, 3, -6, -8, 4, -6, -8, 3, -5, -8, 4, -5}, BlockType::DIRT),
    std::make_pair(quad{-8, 2, -4, -8, 3, -4, -8, 2, -2, -8, 3, -2}, BlockType::DIRT),
    std::make_pair(quad{-8, 2, 3, -8, 3, 3, -8, 2, 5, -8, 3, 5}, BlockType::DIRT),
    std::make_pair(quad{-8, 3, 6, -8, 4, 6, -8, 3, 7, -8, 4, 7}, BlockType::DIRT),
    std::make_pair(quad{-8, 4, 8, -8, 5, 8, -8, 4, 9, -8, 5, 9}, BlockType::DIRT),
    std::make_pair(quad{-8, 5, 9, -8, 6, 9, -8, 5, 10, -8, 6, 10}, BlockType::DIRT),
    std::make_pair(quad{-8, 6, 10, -8, 7, 10, -8, 6, 11, -8, 7, 11}, BlockType::DIRT),
    std::make_pair(quad{-7, 6, -11, -7, 7, -11, -7, 6, -10, -7, 7, -10}, BlockType::DIRT),
    std::make_pair(quad{-7, 5, -10, -7, 6, -10, -7, 5, -9, -7, 6, -9}, BlockType::DIRT),
    std::make_pair(quad{-7, 4, -9, -7, 5, -9, -7, 4, -8, -7, 5, -8}, BlockType::DIRT),
    std::make_pair(quad{-7, 3, -7, -7, 4, -7, -7, 3, -6, -7, 4, -6}, BlockType::DIRT),
    std::make_pair(quad{-7, 2, -6, -7, 3, -6, -7, 2, -4, -7, 3, -4}, BlockType::DIRT),
    std::make_pair(quad{-7, 1, -3, -7, 2, -3, -7, 1, 4, -7, 2, 4}, BlockType::DIRT),
    std::make_pair(quad{-7, 2, 5, -7, 3, 5, -7, 2, 7, -7, 3, 7}, BlockType::DIRT),
    std::make_pair(quad{-7, 3, 7, -7, 4, 7, -7, 3, 8, -7, 4, 8}, BlockType::DIRT),
    std::make_pair(quad{-7, 4, 9, -7, 5, 9, -7, 4, 10, -7, 5, 10}, BlockType::DIRT),
    std::make_pair(quad{-7, 5, 10, -7, 6, 10, -7, 5, 11, -7, 6, 11}, BlockType::DIRT),
    std::make_pair(quad{-7, 6, 11, -7, 7, 11, -7, 6, 12, -7, 7, 12}, BlockType::DIRT),
    std::make_pair(quad{-6, 3, -8, -6, 4, -8, -6, 3, -7, -6, 4, -7}, BlockType::DIRT),
    std::make_pair(quad{-6, 2, -7, -6, 3, -7, -6, 2, -6, -6, 3, -6}, BlockType::DIRT),
    std::make_pair(quad{-6, 1, -4, -6, 2, -4, -6, 1, -3, -6, 2, -3}, BlockType::DIRT),
    std::make_pair(quad{-6, 1, 4, -6, 2, 4, -6, 1, 5, -6, 2, 5}, BlockType::DIRT),
    std::make_pair(quad{-6, 2, 7, -6, 3, 7, -6, 2, 8, -6, 3, 8}, BlockType::DIRT),
    std::make_pair(quad{-6, 3, 8, -6, 4, 8, -6, 3, 9, -6, 4, 9}, BlockType::DIRT),
    std::make_pair(quad{-5, 6, -12, -5, 7, -12, -5, 6, -11, -5, 7, -11}, BlockType::DIRT),
    std::make_pair(quad{-5, 5, -11, -5, 6, -11, -5, 5, -10, -5, 6, -10}, BlockType::DIRT),
    std::make_pair(quad{-5, 4, -10, -5, 5, -10, -5, 4, -9, -5, 5, -9}, BlockType::DIRT),
    std::make_pair(quad{-5, 3, -9, -5, 4, -9, -5, 3, -8, -5, 4, -8}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, -5, -5, 2, -5, -5, 1, -4, -5, 2, -4}, BlockType::DIRT),
    std::make_pair(quad{-5, 0, -2, -5, 1, -2, -5, 0, 3, -5, 1, 3}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, 5, -5, 2, 5, -5, 1, 6, -5, 2, 6}, BlockType::DIRT),
    std::make_pair(quad{-5, 3, 9, -5, 4, 9, -5, 3, 10, -5, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{-5, 4, 10, -5, 5, 10, -5, 4, 11, -5, 5, 11}, BlockType::DIRT),
    std::make_pair(quad{-5, 5, 11, -5, 6, 11, -5, 5, 12, -5, 6, 12}, BlockType::DIRT),
    std::make_pair(quad{-5, 6, 12, -5, 7, 12, -5, 6, 13, -5, 7, 13}, BlockType::DIRT),
    std::make_pair(quad{-4, 2, -8, -4, 3, -8, -4, 2, -7, -4, 3, -7}, BlockType::DIRT),
    std::make_pair(quad{-4, 1, -6, -4, 2, -6, -4, 1, -5, -4, 2, -5}, BlockType::DIRT),
    std::make_pair(quad{-4, 0, -3, -4, 1, -3, -4, 0, -2, -4, 1, -2}, BlockType::DIRT),
    std::make_pair(quad{-4, 0, 3, -4, 1, 3, -4, 0, 4, -4, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{-4, 1, 6, -4, 2, 6, -4, 1, 7, -4, 2, 7}, BlockType::DIRT),
    std::make_pair(quad{-4, 2, 8, -4, 3, 8, -4, 2, 9, -4, 3, 9}, BlockType::DIRT),
    std::make_pair(quad{-3, 5, -12, -3, 6, -12, -3, 5, -11, -3, 6, -11}, BlockType::DIRT),
    std::make_pair(quad{-3, 4, -11, -3, 5, -11, -3, 4, -10, -3, 5, -10}, BlockType::DIRT),
    std::make_pair(quad{-3, 3, -10, -3, 4, -10, -3, 3, -9, -3, 4, -9}, BlockType::DIRT),
    std::make_pair(quad{-3, 1, -7, -3, 2, -7, -3, 1, -6, -3, 2, -6}, BlockType::DIRT),
    std::make_pair(quad{-3, 0, -4, -3, 1, -4, -3, 0, -3, -3, 1, -3}, BlockType::DIRT),
    std::make_pair(quad{-3, 0, 4, -3, 1, 4, -3, 0, 5, -3, 1, 5}, BlockType::DIRT),
    std::make_pair(quad{-3, 1, 7, -3, 2, 7, -3, 1, 8, -3, 2, 8}, BlockType::DIRT),
    std::make_pair(quad{-3, 3, 10, -3, 4, 10, -3, 3, 11, -3, 4, 11}, BlockType::DIRT),
    std::make_pair(quad{-3, 4, 11, -3, 5, 11, -3, 4, 12, -3, 5, 12}, BlockType::DIRT),
    std::make_pair(quad{-3, 5, 12, -3, 6, 12, -3, 5, 13, -3, 6, 13}, BlockType::DIRT),
    std::make_pair(quad{-2, 6, -13, -2, 7, -13, -2, 6, -12, -2, 7, -12}, BlockType::DIRT),
    std::make_pair(quad{-2, 2, -9, -2, 3, -9, -2, 2, -8, -2, 3, -8}, BlockType::DIRT),
    std::make_pair(quad{-2, 0, -5, -2, 1, -5, -2, 0, -4, -2, 1, -4}, BlockType::DIRT),
    std::make_pair(quad{-2, 0, 5, -2, 1, 5, -2, 0, 6, -2, 1, 6}, BlockType::DIRT),
    std::make_pair(quad{-2, 2, 9, -2, 3, 9, -2, 2, 10, -2, 3, 10}, BlockType::DIRT),
    std::make_pair(quad{-2, 6, 13, -2, 7, 13, -2, 6, 14, -2, 7, 14}, BlockType::DIRT),
    std::make_pair(quad{3, 6, -13, 3, 7, -13, 3, 6, -12, 3, 7, -12}, BlockType::DIRT),
    std::make_pair(quad{3, 2, -9, 3, 3, -9, 3, 2, -8, 3, 3, -8}, BlockType::DIRT),
    std::make_pair(quad{3, 0, -5, 3, 1, -5, 3, 0, -4, 3, 1, -4}, BlockType::DIRT),
    std::make_pair(quad{3, 0, 5, 3, 1, 5, 3, 0, 6, 3, 1, 6}, BlockType::DIRT),
    std::make_pair(quad{3, 2, 9, 3, 3, 9, 3, 2, 10, 3, 3, 10}, BlockType::DIRT),
    std::make_pair(quad{3, 6, 13, 3, 7, 13, 3, 6, 14, 3, 7, 14}, BlockType::DIRT),
    std::make_pair(quad{4, 5, -12, 4, 6, -12, 4, 5, -11, 4, 6, -11}, BlockType::DIRT),
    std::make_pair(quad{4, 4, -11, 4, 5, -11, 4, 4, -10, 4, 5, -10}, BlockType::DIRT),
    std::make_pair(quad{4, 3, -10, 4, 4, -10, 4, 3, -9, 4, 4, -9}, BlockType::DIRT),
    std::make_pair(quad{4, 1, -7, 4, 2, -7, 4, 1, -6, 4, 2, -6}, BlockType::DIRT),
    std::make_pair(quad{4, 0, -4, 4, 1, -4, 4, 0, -3, 4, 1, -3}, BlockType::DIRT),
    std::make_pair(quad{4, 0, 4, 4, 1, 4, 4, 0, 5, 4, 1, 5}, BlockType::DIRT),
    std::make_pair(quad{4, 1, 7, 4, 2, 7, 4, 1, 8, 4, 2, 8}, BlockType::DIRT),
    std::make_pair(quad{4, 3, 10, 4, 4, 10, 4, 3, 11, 4, 4, 11}, BlockType::DIRT),
    std::make_pair(quad{4, 4, 11, 4, 5, 11, 4, 4, 12, 4, 5, 12}, BlockType::DIRT),
    std::make_pair(quad{4, 5, 12, 4, 6, 12, 4, 5, 13, 4, 6, 13}, BlockType::DIRT),
    std::make_pair(quad{5, 2, -8, 5, 3, -8, 5, 2, -7, 5, 3, -7}, BlockType::DIRT),
    std::make_pair(quad{5, 1, -6, 5, 2, -6, 5, 1, -5, 5, 2, -5}, BlockType::DIRT),
    std::make_pair(quad{5, 0, -3, 5, 1, -3, 5, 0, -2, 5, 1, -2}, BlockType::DIRT),
    std::make_pair(quad{5, 0, 3, 5, 1, 3, 5, 0, 4, 5, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{5, 1, 6, 5, 2, 6, 5, 1, 7, 5, 2, 7}, BlockType::DIRT),
    std::make_pair(quad{5, 2, 8, 5, 3, 8, 5, 2, 9, 5, 3, 9}, BlockType::DIRT),
    std::make_pair(quad{6, 6, -12, 6, 7, -12, 6, 6, -11, 6, 7, -11}, BlockType::DIRT),
    std::make_pair(quad{6, 5, -11, 6, 6, -11, 6, 5, -10, 6, 6, -10}, BlockType::DIRT),
    std::make_pair(quad{6, 4, -10, 6, 5, -10, 6, 4, -9, 6, 5, -9}, BlockType::DIRT),
    std::make_pair(quad{6, 3, -9, 6, 4, -9, 6, 3, -8, 6, 4, -8}, BlockType::DIRT),
    std::make_pair(quad{6, 1, -5, 6, 2, -5, 6, 1, -4, 6, 2, -4}, BlockType::DIRT),
    std::make_pair(quad{6, 0, -2, 6, 1, -2, 6, 0, 3, 6, 1, 3}, BlockType::DIRT),
    std::make_pair(quad{6, 1, 5, 6, 2, 5, 6, 1, 6, 6, 2, 6}, BlockType::DIRT),
    std::make_pair(quad{6, 3, 9, 6, 4, 9, 6, 3, 10, 6, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{6, 4, 10, 6, 5, 10, 6, 4, 11, 6, 5, 11}, BlockType::DIRT),
    std::make_pair(quad{6, 5, 11, 6, 6, 11, 6, 5, 12, 6, 6, 12}, BlockType::DIRT),
    std::make_pair(quad{6, 6, 12, 6, 7, 12, 6, 6, 13, 6, 7, 13}, BlockType::DIRT),
    std::make_pair(quad{7, 3, -8, 7, 4, -8, 7, 3, -7, 7, 4, -7}, BlockType::DIRT),
    std::make_pair(quad{7, 2, -7, 7, 3, -7, 7, 2, -6, 7, 3, -6}, BlockType::DIRT),
    std::make_pair(quad{7, 1, -4, 7, 2, -4, 7, 1, -3, 7, 2, -3}, BlockType::DIRT),
    std::make_pair(quad{7, 1, 4, 7, 2, 4, 7, 1, 5, 7, 2, 5}, BlockType::DIRT),
    std::make_pair(quad{7, 2, 7, 7, 3, 7, 7, 2, 8, 7, 3, 8}, BlockType::DIRT),
    std::make_pair(quad{7, 3, 8, 7, 4, 8, 7, 3, 9, 7, 4, 9}, BlockType::DIRT),
    std::make_pair(quad{8, 6, -11, 8, 7, -11, 8, 6, -10, 8, 7, -10}, BlockType::DIRT),
    std::make_pair(quad{8, 5, -10, 8, 6, -10, 8, 5, -9, 8, 6, -9}, BlockType::DIRT),
    std::make_pair(quad{8, 4, -9, 8, 5, -9, 8, 4, -8, 8, 5, -8}, BlockType::DIRT),
    std::make_pair(quad{8, 3, -7, 8, 4, -7, 8, 3, -6, 8, 4, -6}, BlockType::DIRT),
    std::make_pair(quad{8, 2, -6, 8, 3, -6, 8, 2, -4, 8, 3, -4}, BlockType::DIRT),
    std::make_pair(quad{8, 1, -3, 8, 2, -3, 8, 1, 4, 8, 2, 4}, BlockType::DIRT),
    std::make_pair(quad{8, 2, 5, 8, 3, 5, 8, 2, 7, 8, 3, 7}, BlockType::DIRT),
    std::make_pair(quad{8, 3, 7, 8, 4, 7, 8, 3, 8, 8, 4, 8}, BlockType::DIRT),
    std::make_pair(quad{8, 4, 9, 8, 5, 9, 8, 4, 10, 8, 5, 10}, BlockType::DIRT),
    std::make_pair(quad{8, 5, 10, 8, 6, 10, 8, 5, 11, 8, 6, 11}, BlockType::DIRT),
    std::make_pair(quad{8, 6, 11, 8, 7, 11, 8, 6, 12, 8, 7, 12}, BlockType::DIRT),
    std::make_pair(quad{9, 6, -10, 9, 7, -10, 9, 6, -9, 9, 7, -9}, BlockType::DIRT),
    std::make_pair(quad{9, 5, -9, 9, 6, -9, 9, 5, -8, 9, 6, -8}, BlockType::DIRT),
    std::make_pair(quad{9, 4, -8, 9, 5, -8, 9, 4, -7, 9, 5, -7}, BlockType::DIRT),
    std::make_pair(quad{9, 3, -6, 9, 4, -6, 9, 3, -5, 9, 4, -5}, BlockType::DIRT),
    std::make_pair(quad{9, 2, -4, 9, 3, -4, 9, 2, -2, 9, 3, -2}, BlockType::DIRT),
    std::make_pair(quad{9, 2, 3, 9, 3, 3, 9, 2, 5, 9, 3, 5}, BlockType::DIRT),
    std::make_pair(quad{9, 3, 6, 9, 4, 6, 9, 3, 7, 9, 4, 7}, BlockType::DIRT),
    std::make_pair(quad{9, 4, 8, 9, 5, 8, 9, 4, 9, 9, 5, 9}, BlockType::DIRT),
    std::make_pair(quad{9, 5, 9, 9, 6, 9, 9, 5, 10, 9, 6, 10}, BlockType::DIRT),
    std::make_pair(quad{9, 6, 10, 9, 7, 10, 9, 6, 11, 9, 7, 11}, BlockType::DIRT),
    std::make_pair(quad{10, 6, -9, 10, 7, -9, 10, 6, -8, 10, 7, -8}, BlockType::DIRT),
    std::make_pair(quad{10, 5, -8, 10, 6, -8, 10, 5, -7, 10, 6, -7}, BlockType::DIRT),
    std::make_pair(quad{10, 4, -7, 10, 5, -7, 10, 4, -5, 10, 5, -5}, BlockType::DIRT),
    std::make_pair(quad{10, 3, -5, 10, 4, -5, 10, 3, -3, 10, 4, -3}, BlockType::DIRT),
    std::make_pair(quad{10, 2, -2, 10, 3, -2, 10, 2, 3, 10, 3, 3}, BlockType::DIRT),
    std::make_pair(quad{10, 3, 4, 10, 4, 4, 10, 3, 6, 10, 4, 6}, BlockType::DIRT),
    std::make_pair(quad{10, 4, 6, 10, 5, 6, 10, 4, 8, 10, 5, 8}, BlockType::DIRT),
    std::make_pair(quad{10, 5, 8, 10, 6, 8, 10, 5, 9, 10, 6, 9}, BlockType::DIRT),
    std::make_pair(quad{10, 6, 9, 10, 7, 9, 10, 6, 10, 10, 7, 10}, BlockType::DIRT),
    std::make_pair(quad{11, 6, -8, 11, 7, -8, 11, 6, -7, 11, 7, -7}, BlockType::DIRT),
    std::make_pair(quad{11, 5, -7, 11, 6, -7, 11, 5, -5, 11, 6, -5}, BlockType::DIRT),
    std::make_pair(quad{11, 4, -5, 11, 5, -5, 11, 4, -3, 11, 5, -3}, BlockType::DIRT),
    std::make_pair(quad{11, 3, -3, 11, 4, -3, 11, 3, 4, 11, 4, 4}, BlockType::DIRT),
    std::make_pair(quad{11, 4, 4, 11, 5, 4, 11, 4, 6, 11, 5, 6}, BlockType::DIRT),
    std::make_pair(quad{11, 5, 6, 11, 6, 6, 11, 5, 8, 11, 6, 8}, BlockType::DIRT),
    std::make_pair(quad{11, 6, 8, 11, 7, 8, 11, 6, 9, 11, 7, 9}, BlockType::DIRT),
    std::make_pair(quad{12, 6, -7, 12, 7, -7, 12, 6, -5, 12, 7, -5}, BlockType::DIRT),
    std::make_pair(quad{12, 5, -5, 12, 6, -5, 12, 5, -3, 12, 6, -3}, BlockType::DIRT),
    std::make_pair(quad{12, 4, -3, 12, 5, -3, 12, 4, 4, 12, 5, 4}, BlockType::DIRT),
    std::make_pair(quad{12, 5, 4, 12, 6, 4, 12, 5, 6, 12, 6, 6}, BlockType::DIRT),
    std::make_pair(quad{12, 6, 6, 12, 7, 6, 12, 6, 8, 12, 7, 8}, BlockType::DIRT),
    std::make_pair(quad{13, 6, -5, 13, 7, -5, 13, 6, -2, 13, 7, -2}, BlockType::DIRT),
    std::make_pair(quad{13, 5, -3, 13, 6, -3, 13, 5, 4, 13, 6, 4}, BlockType::DIRT),
    std::make_pair(quad{13, 6, 3, 13, 7, 3, 13, 6, 6, 13, 7, 6}, BlockType::DIRT),
    std::make_pair(quad{14, 6, -2, 14, 7, -2, 14, 6, 3, 14, 7, 3}, BlockType::DIRT),
    std::make_pair(quad{-5, 0, -2, -5, 0, 3, 6, 0, -2, 6, 0, 3}, BlockType::DIRT),
    std::make_pair(quad{-4, 0, -3, -4, 0, -2, 5, 0, -3, 5, 0, -2}, BlockType::DIRT),
    std::make_pair(quad{-4, 0, 3, -4, 0, 4, 5, 0, 3, 5, 0, 4}, BlockType::DIRT),
    std::make_pair(quad{-3, 0, -4, -3, 0, -3, 4, 0, -4, 4, 0, -3}, BlockType::DIRT),
    std::make_pair(quad{-3, 0, 4, -3, 0, 5, 4, 0, 4, 4, 0, 5}, BlockType::DIRT),
    std::make_pair(quad{-2, 0, -5, -2, 0, -4, 3, 0, -5, 3, 0, -4}, BlockType::DIRT),
    std::make_pair(quad{-2, 0, 5, -2, 0, 6, 3, 0, 5, 3, 0, 6}, BlockType::DIRT),
    std::make_pair(quad{-7, 1, -3, -7, 1, 4, -5, 1, -3, -5, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{-6, 1, -4, -6, 1, -3, -3, 1, -4, -3, 1, -3}, BlockType::DIRT),
    std::make_pair(quad{-6, 1, 4, -6, 1, 5, -3, 1, 4, -3, 1, 5}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, -5, -5, 1, -4, -2, 1, -5, -2, 1, -4}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, -3, -5, 1, -2, -4, 1, -3, -4, 1, -2}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, 3, -5, 1, 4, -4, 1, 3, -4, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, 5, -5, 1, 6, -2, 1, 5, -2, 1, 6}, BlockType::DIRT),
    std::make_pair(quad{-4, 1, -6, -4, 1, -5, 5, 1, -6, 5, 1, -5}, BlockType::DIRT),
    std::make_pair(quad{-4, 1, 6, -4, 1, 7, 5, 1, 6, 5, 1, 7}, BlockType::DIRT),
    std::make_pair(quad{-3, 1, -7, -3, 1, -6, 4, 1, -7, 4, 1, -6}, BlockType::DIRT),
    std::make_pair(quad{-3, 1, 7, -3, 1, 8, 4, 1, 7, 4, 1, 8}, BlockType::DIRT),
    std::make_pair(quad{3, 1, -5, 3, 1, -4, 6, 1, -5, 6, 1, -4}, BlockType::DIRT),
    std::make_pair(quad{3, 1, 5, 3, 1, 6, 6, 1, 5, 6, 1, 6}, BlockType::DIRT),
    std::make_pair(quad{4, 1, -4, 4, 1, -3, 7, 1, -4, 7, 1, -3}, BlockType::DIRT),
    std::make_pair(quad{4, 1, 4, 4, 1, 5, 7, 1, 4, 7, 1, 5}, BlockType::DIRT),
    std::make_pair(quad{5, 1, -3, 5, 1, -2, 8, 1, -3, 8, 1, -2}, BlockType::DIRT),
    std::make_pair(quad{5, 1, 3, 5, 1, 4, 8, 1, 3, 8, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{6, 1, -2, 6, 1, 3, 8, 1, -2, 8, 1, 3}, BlockType::DIRT),
    std::make_pair(quad{-9, 2, -2, -9, 2, 3, -7, 2, -2, -7, 2, 3}, BlockType::DIRT),
    std::make_pair(quad{-8, 2, -4, -8, 2, -2, -7, 2, -4, -7, 2, -2}, BlockType::DIRT),
    std::make_pair(quad{-8, 2, 3, -8, 2, 5, -7, 2, 3, -7, 2, 5}, BlockType::DIRT),
    std::make_pair(quad{-7, 2, -6, -7, 2, -3, -6, 2, -6, -6, 2, -3}, BlockType::DIRT),
    std::make_pair(quad{-7, 2, 4, -7, 2, 7, -6, 2, 4, -6, 2, 7}, BlockType::DIRT),
    std::make_pair(quad{-6, 2, -7, -6, 2, -4, -5, 2, -7, -5, 2, -4}, BlockType::DIRT),
    std::make_pair(quad{-6, 2, 5, -6, 2, 8, -5, 2, 5, -5, 2, 8}, BlockType::DIRT),
    std::make_pair(quad{-5, 2, -7, -5, 2, -5, -4, 2, -7, -4, 2, -5}, BlockType::DIRT),
    std::make_pair(quad{-5, 2, 6, -5, 2, 8, -4, 2, 6, -4, 2, 8}, BlockType::DIRT),
    std::make_pair(quad{-4, 2, -8, -4, 2, -6, -3, 2, -8, -3, 2, -6}, BlockType::DIRT),
    std::make_pair(quad{-4, 2, 7, -4, 2, 9, -3, 2, 7, -3, 2, 9}, BlockType::DIRT),
    std::make_pair(quad{-3, 2, -8, -3, 2, -7, 5, 2, -8, 5, 2, -7}, BlockType::DIRT),
    std::make_pair(quad{-3, 2, 8, -3, 2, 9, 5, 2, 8, 5, 2, 9}, BlockType::DIRT),
    std::make_pair(quad{-2, 2, -9, -2, 2, -8, 3, 2, -9, 3, 2, -8}, BlockType::DIRT),
    std::make_pair(quad{-2, 2, 9, -2, 2, 10, 3, 2, 9, 3, 2, 10}, BlockType::DIRT),
    std::make_pair(quad{4, 2, -7, 4, 2, -6, 7, 2, -7, 7, 2, -6}, BlockType::DIRT),
    std::make_pair(quad{4, 2, 7, 4, 2, 8, 7, 2, 7, 7, 2, 8}, BlockType::DIRT),
    std::make_pair(quad{5, 2, -6, 5, 2, -5, 8, 2, -6, 8, 2, -5}, BlockType::DIRT),
    std::make_pair(quad{5, 2, 6, 5, 2, 7, 8, 2, 6, 8, 2, 7}, BlockType::DIRT),
    std::make_pair(quad{6, 2, -5, 6, 2, -4, 8, 2, -5, 8, 2, -4}, BlockType::DIRT),
    std::make_pair(quad{6, 2, 5, 6, 2, 6, 8, 2, 5, 8, 2, 6}, BlockType::DIRT),
    std::make_pair(quad{7, 2, -4, 7, 2, -3, 9, 2, -4, 9, 2, -3}, BlockType::DIRT),
    std::make_pair(quad{7, 2, 4, 7, 2, 5, 9, 2, 4, 9, 2, 5}, BlockType::DIRT),
    std::make_pair(quad{8, 2, -3, 8, 2, 4, 9, 2, -3, 9, 2, 4}, BlockType::DIRT),
    std::make_pair(quad{9, 2, -2, 9, 2, 3, 10, 2, -2, 10, 2, 3}, BlockType::DIRT),
    std::make_pair(quad{-10, 3, -3, -10, 3, 4, -9, 3, -3, -9, 3, 4}, BlockType::DIRT),
    std::make_pair(quad{-9, 3, -5, -9, 3, -2, -8, 3, -5, -8, 3, -2}, BlockType::DIRT),
    std::make_pair(quad{-9, 3, 3, -9, 3, 6, -8, 3, 3, -8, 3, 6}, BlockType::DIRT),
    std::make_pair(quad{-8, 3, -6, -8, 3, -4, -7, 3, -6, -7, 3, -4}, BlockType::DIRT),
    std::make_pair(quad{-8, 3, 5, -8, 3, 7, -7, 3, 5, -7, 3, 7}, BlockType::DIRT),
    std::make_pair(quad{-7, 3, -7, -7, 3, -6, -6, 3, -7, -6, 3, -6}, BlockType::DIRT),
    std::make_pair(quad{-7, 3, 7, -7, 3, 8, -6, 3, 7, -6, 3, 8}, BlockType::DIRT),
    std::make_pair(quad{-6, 3, -8, -6, 3, -7, -4, 3, -8, -4, 3, -7}, BlockType::DIRT),
    std::make_pair(quad{-6, 3, 8, -6, 3, 9, -4, 3, 8, -4, 3, 9}, BlockType::DIRT),
    std::make_pair(quad{-5, 3, -9, -5, 3, -8, -2, 3, -9, -2, 3, -8}, BlockType::DIRT),
    std::make_pair(quad{-5, 3, 9, -5, 3, 10, -2, 3, 9, -2, 3, 10}, BlockType::DIRT),
    std::make_pair(quad{-3, 3, -10, -3, 3, -9, 4, 3, -10, 4, 3, -9}, BlockType::DIRT),
    std::make_pair(quad{-3, 3, 10, -3, 3, 11, 4, 3, 10, 4, 3, 11}, BlockType::DIRT),
    std::make_pair(quad{3, 3, -9, 3, 3, -8, 6, 3, -9, 6, 3, -8}, BlockType::DIRT),
    std::make_pair(quad{3, 3, 9, 3, 3, 10, 6, 3, 9, 6, 3, 10}, BlockType::DIRT),
    std::make_pair(quad{5, 3, -8, 5, 3, -7, 7, 3, -8, 7, 3, -7}, BlockType::DIRT),
    std::make_pair(quad{5, 3, 8, 5, 3, 9, 7, 3, 8, 7, 3, 9}, BlockType::DIRT),
    std::make_pair(quad{7, 3, -7, 7, 3, -6, 8, 3, -7, 8, 3, -6}, BlockType::DIRT),
    std::make_pair(quad{7, 3, 7, 7, 3, 8, 8, 3, 7, 8, 3, 8}, BlockType::DIRT),
    std::make_pair(quad{8, 3, -6, 8, 3, -4, 9, 3, -6, 9, 3, -4}, BlockType::DIRT),
    std::make_pair(quad{8, 3, 5, 8, 3, 7, 9, 3, 5, 9, 3, 7}, BlockType::DIRT),
    std::make_pair(quad{9, 3, -5, 9, 3, -2, 10, 3, -5, 10, 3, -2}, BlockType::DIRT),
    std::make_pair(quad{9, 3, 3, 9, 3, 6, 10, 3, 3, 10, 3, 6}, BlockType::DIRT),
    std::make_pair(quad{10, 3, -3, 10, 3, 4, 11, 3, -3, 11, 3, 4}, BlockType::DIRT),
    std::make_pair(quad{-11, 4, -3, -11, 4, 4, -10, 4, -3, -10, 4, 4}, BlockType::DIRT),
    std::make_pair(quad{-10, 4, -5, -10, 4, -3, -9, 4, -5, -9, 4, -3}, BlockType::DIRT),
    std::make_pair(quad{-10, 4, 4, -10, 4, 6, -9, 4, 4, -9, 4, 6}, BlockType::DIRT),
    std::make_pair(quad{-9, 4, -7, -9, 4, -5, -8, 4, -7, -8, 4, -5}, BlockType::DIRT),
    std::make_pair(quad{-9, 4, 6, -9, 4, 8, -8, 4, 6, -8, 4, 8}, BlockType::DIRT),
    std::make_pair(quad{-8, 4, -8, -8, 4, -6, -7, 4, -8, -7, 4, -6}, BlockType::DIRT),
    std::make_pair(quad{-8, 4, 7, -8, 4, 9, -7, 4, 7, -7, 4, 9}, BlockType::DIRT),
    std::make_pair(quad{-7, 4, -9, -7, 4, -7, -6, 4, -9, -6, 4, -7}, BlockType::DIRT),
    std::make_pair(quad{-7, 4, 8, -7, 4, 10, -6, 4, 8, -6, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{-6, 4, -9, -6, 4, -8, -5, 4, -9, -5, 4, -8}, BlockType::DIRT),
    std::make_pair(quad{-6, 4, 9, -6, 4, 10, -5, 4, 9, -5, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{-5, 4, -10, -5, 4, -9, -3, 4, -10, -3, 4, -9}, BlockType::DIRT),
    std::make_pair(quad{-5, 4, 10, -5, 4, 11, -3, 4, 10, -3, 4, 11}, BlockType::DIRT),
    std::make_pair(quad{-3, 4, -11, -3, 4, -10, 4, 4, -11, 4, 4, -10}, BlockType::DIRT),
    std::make_pair(quad{-3, 4, 11, -3, 4, 12, 4, 4, 11, 4, 4, 12}, BlockType::DIRT),
    std::make_pair(quad{4, 4, -10, 4, 4, -9, 6, 4, -10, 6, 4, -9}, BlockType::DIRT),
    std::make_pair(quad{4, 4, 10, 4, 4, 11, 6, 4, 10, 6, 4, 11}, BlockType::DIRT),
    std::make_pair(quad{6, 4, -9, 6, 4, -8, 8, 4, -9, 8, 4, -8}, BlockType::DIRT),
    std::make_pair(quad{6, 4, 9, 6, 4, 10, 8, 4, 9, 8, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{7, 4, -8, 7, 4, -7, 9, 4, -8, 9, 4, -7}, BlockType::DIRT),
    std::make_pair(quad{7, 4, 8, 7, 4, 9, 9, 4, 8, 9, 4, 9}, BlockType::DIRT),
    std::make_pair(quad{8, 4, -7, 8, 4, -6, 10, 4, -7, 10, 4, -6}, BlockType::DIRT),
    std::make_pair(quad{8, 4, 7, 8, 4, 8, 10, 4, 7, 10, 4, 8}, BlockType::DIRT),
    std::make_pair(quad{9, 4, -6, 9, 4, -5, 10, 4, -6, 10, 4, -5}, BlockType::DIRT),
    std::make_pair(quad{9, 4, 6, 9, 4, 7, 10, 4, 6, 10, 4, 7}, BlockType::DIRT),
    std::make_pair(quad{10, 4, -5, 10, 4, -3, 11, 4, -5, 11, 4, -3}, BlockType::DIRT),
    std::make_pair(quad{10, 4, 4, 10, 4, 6, 11, 4, 4, 11, 4, 6}, BlockType::DIRT),
    std::make_pair(quad{11, 4, -3, 11, 4, 4, 12, 4, -3, 12, 4, 4}, BlockType::DIRT),
    std::make_pair(quad{-12, 5, -3, -12, 5, 4, -11, 5, -3, -11, 5, 4}, BlockType::DIRT),
    std::make_pair(quad{-11, 5, -5, -11, 5, -3, -10, 5, -5, -10, 5, -3}, BlockType::DIRT),
    std::make_pair(quad{-11, 5, 4, -11, 5, 6, -10, 5, 4, -10, 5, 6}, BlockType::DIRT),
    std::make_pair(quad{-10, 5, -7, -10, 5, -5, -9, 5, -7, -9, 5, -5}, BlockType::DIRT),
    std::make_pair(quad{-10, 5, 6, -10, 5, 8, -9, 5, 6, -9, 5, 8}, BlockType::DIRT),
    std::make_pair(quad{-9, 5, -8, -9, 5, -7, -8, 5, -8, -8, 5, -7}, BlockType::DIRT),
    std::make_pair(quad{-9, 5, 8, -9, 5, 9, -8, 5, 8, -8, 5, 9}, BlockType::DIRT),
    std::make_pair(quad{-8, 5, -9, -8, 5, -8, -7, 5, -9, -7, 5, -8}, BlockType::DIRT),
    std::make_pair(quad{-8, 5, 9, -8, 5, 10, -7, 5, 9, -7, 5, 10}, BlockType::DIRT),
    std::make_pair(quad{-7, 5, -10, -7, 5, -9, -5, 5, -10, -5, 5, -9}, BlockType::DIRT),
    std::make_pair(quad{-7, 5, 10, -7, 5, 11, -5, 5, 10, -5, 5, 11}, BlockType::DIRT),
    std::make_pair(quad{-5, 5, -11, -5, 5, -10, -3, 5, -11, -3, 5, -10}, BlockType::DIRT),
    std::make_pair(quad{-5, 5, 11, -5, 5, 12, -3, 5, 11, -3, 5, 12}, BlockType::DIRT),
    std::make_pair(quad{-3, 5, -12, -3, 5, -11, 4, 5, -12, 4, 5, -11}, BlockType::DIRT),
    std::make_pair(quad{-3, 5, 12, -3, 5, 13, 4, 5, 12, 4, 5, 13}, BlockType::DIRT),
    std::make_pair(quad{4, 5, -11, 4, 5, -10, 6, 5, -11, 6, 5, -10}, BlockType::DIRT),
    std::make_pair(quad{4, 5, 11, 4, 5, 12, 6, 5, 11, 6, 5, 12}, BlockType::DIRT),
    std::make_pair(quad{6, 5, -10, 6, 5, -9, 8, 5, -10, 8, 5, -9}, BlockType::DIRT),
    std::make_pair(quad{6, 5, 10, 6, 5, 11, 8, 5, 10, 8, 5, 11}, BlockType::DIRT),
    std::make_pair(quad{8, 5, -9, 8, 5, -8, 9, 5, -9, 9, 5, -8}, BlockType::DIRT),
    std::make_pair(quad{8, 5, 9, 8, 5, 10, 9, 5, 9, 9, 5, 10}, BlockType::DIRT),
    std::make_pair(quad{9, 5, -8, 9, 5, -7, 10, 5, -8, 10, 5, -7}, BlockType::DIRT),
    std::make_pair(quad{9, 5, 8, 9, 5, 9, 10, 5, 8, 10, 5, 9}, BlockType::DIRT),
    std::make_pair(quad{10, 5, -7, 10, 5, -5, 11, 5, -7, 11, 5, -5}, BlockType::DIRT),
    std::make_pair(quad{10, 5, 6, 10, 5, 8, 11, 5, 6, 11, 5, 8}, BlockType::DIRT),
    std::make_pair(quad{11, 5, -5, 11, 5, -3, 12, 5, -5, 12, 5, -3}, BlockType::DIRT),
    std::make_pair(quad{11, 5, 4, 11, 5, 6, 12, 5, 4, 12, 5, 6}, BlockType::DIRT),
    std::make_pair(quad{12, 5, -3, 12, 5, 4, 13, 5, -3, 13, 5, 4}, BlockType::DIRT),
    std::make_pair(quad{-13, 6, -2, -13, 6, 3, -12, 6, -2, -12, 6, 3}, BlockType::DIRT),
    std::make_pair(quad{-12, 6, -5, -12, 6, -3, -11, 6, -5, -11, 6, -3}, BlockType::DIRT),
    std::make_pair(quad{-12, 6, 4, -12, 6, 6, -11, 6, 4, -11, 6, 6}, BlockType::DIRT),
    std::make_pair(quad{-11, 6, -7, -11, 6, -5, -10, 6, -7, -10, 6, -5}, BlockType::DIRT),
    std::make_pair(quad{-11, 6, 6, -11, 6, 8, -10, 6, 6, -10, 6, 8}, BlockType::DIRT),
    std::make_pair(quad{-10, 6, -8, -10, 6, -7, -9, 6, -8, -9, 6, -7}, BlockType::DIRT),
    std::make_pair(quad{-10, 6, 8, -10, 6, 9, -9, 6, 8, -9, 6, 9}, BlockType::DIRT),
    std::make_pair(quad{-9, 6, -9, -9, 6, -8, -8, 6, -9, -8, 6, -8}, BlockType::DIRT),
    std::make_pair(quad{-9, 6, 9, -9, 6, 10, -8, 6, 9, -8, 6, 10}, BlockType::DIRT),
    std::make_pair(quad{-8, 6, -10, -8, 6, -9, -7, 6, -10, -7, 6, -9}, BlockType::DIRT),
    std::make_pair(quad{-8, 6, 10, -8, 6, 11, -7, 6, 10, -7, 6, 11}, BlockType::DIRT),
    std::make_pair(quad{-7, 6, -11, -7, 6, -10, -5, 6, -11, -5, 6, -10}, BlockType::DIRT),
    std::make_pair(quad{-7, 6, 11, -7, 6, 12, -5, 6, 11, -5, 6, 12}, BlockType::DIRT),
    std::make_pair(quad{-5, 6, -12, -5, 6, -11, -3, 6, -12, -3, 6, -11}, BlockType::DIRT),
    std::make_pair(quad{-5, 6, 12, -5, 6, 13, -3, 6, 12, -3, 6, 13}, BlockType::DIRT),
    std::make_pair(quad{-2, 6, -13, -2, 6, -12, 3, 6, -13, 3, 6, -12}, BlockType::DIRT),
    std::make_pair(quad{-2, 6, 13, -2, 6, 14, 3, 6, 13, 3, 6, 14}, BlockType::DIRT),
    std::make_pair(quad{4, 6, -12, 4, 6, -11, 6, 6, -12, 6, 6, -11}, BlockType::DIRT),
    std::make_pair(quad{4, 6, 12, 4, 6, 13, 6, 6, 12, 6, 6, 13}, BlockType::DIRT),
    std::make_pair(quad{6, 6, -11, 6, 6, -10, 8, 6, -11, 8, 6, -10}, BlockType::DIRT),
    std::make_pair(quad{6, 6, 11, 6, 6, 12, 8, 6, 11, 8, 6, 12}, BlockType::DIRT),
    std::make_pair(quad{8, 6, -10, 8, 6, -9, 9, 6, -10, 9, 6, -9}, BlockType::DIRT),
    std::make_pair(quad{8, 6, 10, 8, 6, 11, 9, 6, 10, 9, 6, 11}, BlockType::DIRT),
    std::make_pair(quad{9, 6, -9, 9, 6, -8, 10, 6, -9, 10, 6, -8}, BlockType::DIRT),
    std::make_pair(quad{9, 6, 9, 9, 6, 10, 10, 6, 9, 10, 6, 10}, BlockType::DIRT),
    std::make_pair(quad{10, 6, -8, 10, 6, -7, 11, 6, -8, 11, 6, -7}, BlockType::DIRT),
    std::make_pair(quad{10, 6, 8, 10, 6, 9, 11, 6, 8, 11, 6, 9}, BlockType::DIRT),
    std::make_pair(quad{11, 6, -7, 11, 6, -5, 12, 6, -7, 12, 6, -5}, BlockType::DIRT),
    std::make_pair(quad{11, 6, 6, 11, 6, 8, 12, 6, 6, 12, 6, 8}, BlockType::DIRT),
    std::make_pair(quad{12, 6, -5, 12, 6, -3, 13, 6, -5, 13, 6, -3}, BlockType::DIRT),
    std::make_pair(quad{12, 6, 4, 12, 6, 6, 13, 6, 4, 13, 6, 6}, BlockType::DIRT),
    std::make_pair(quad{13, 6, -2, 13, 6, 3, 14, 6, -2, 14, 6, 3}, BlockType::DIRT),
    std::make_pair(quad{-13, 7, -2, -13, 7, 3, 14, 7, -2, 14, 7, 3}, BlockType::DIRT),
    std::make_pair(quad{-12, 7, -5, -12, 7, -2, 13, 7, -5, 13, 7, -2}, BlockType::DIRT),
    std::make_pair(quad{-12, 7, 3, -12, 7, 6, 13, 7, 3, 13, 7, 6}, BlockType::DIRT),
    std::make_pair(quad{-11, 7, -7, -11, 7, -5, 12, 7, -7, 12, 7, -5}, BlockType::DIRT),
    std::make_pair(quad{-11, 7, 6, -11, 7, 8, 12, 7, 6, 12, 7, 8}, BlockType::DIRT),
    std::make_pair(quad{-10, 7, -8, -10, 7, -7, 11, 7, -8, 11, 7, -7}, BlockType::DIRT),
    std::make_pair(quad{-10, 7, 8, -10, 7, 9, 11, 7, 8, 11, 7, 9}, BlockType::DIRT),
    std::make_pair(quad{-9, 7, -9, -9, 7, -8, 10, 7, -9, 10, 7, -8}, BlockType::DIRT),
    std::make_pair(quad{-9, 7, 9, -9, 7, 10, 10, 7, 9, 10, 7, 10}, BlockType::DIRT),
    std::make_pair(quad{-8, 7, -10, -8, 7, -9, 9, 7, -10, 9, 7, -9}, BlockType::DIRT),
    std::make_pair(quad{-8, 7, 10, -8, 7, 11, 9, 7, 10, 9, 7, 11}, BlockType::DIRT),
    std::make_pair(quad{-7, 7, -11, -7, 7, -10, 8, 7, -11, 8, 7, -10}, BlockType::DIRT),
    std::make_pair(quad{-7, 7, 11, -7, 7, 12, 8, 7, 11, 8, 7, 12}, BlockType::DIRT),
    std::make_pair(quad{-5, 7, -12, -5, 7, -11, 6, 7, -12, 6, 7, -11}, BlockType::DIRT),
    std::make_pair(quad{-5, 7, 12, -5, 7, 13, 6, 7, 12, 6, 7, 13}, BlockType::DIRT),
    std::make_pair(quad{-2, 7, -13, -2, 7, -12, 3, 7, -13, 3, 7, -12}, BlockType::DIRT),
    std::make_pair(quad{-2, 7, 13, -2, 7, 14, 3, 7, 13, 3, 7, 14}, BlockType::DIRT),
    std::make_pair(quad{-2, 6, -13, 3, 6, -13, -2, 7, -13, 3, 7, -13}, BlockType::DIRT),
    std::make_pair(quad{-3, 5, -12, 4, 5, -12, -3, 6, -12, 4, 6, -12}, BlockType::DIRT),
    std::make_pair(quad{-5, 6, -12, -2, 6, -12, -5, 7, -12, -2, 7, -12}, BlockType::DIRT),
    std::make_pair(quad{3, 6, -12, 6, 6, -12, 3, 7, -12, 6, 7, -12}, BlockType::DIRT),
    std::make_pair(quad{-3, 4, -11, 4, 4, -11, -3, 5, -11, 4, 5, -11}, BlockType::DIRT),
    std::make_pair(quad{-5, 5, -11, -3, 5, -11, -5, 6, -11, -3, 6, -11}, BlockType::DIRT),
    std::make_pair(quad{4, 5, -11, 6, 5, -11, 4, 6, -11, 6, 6, -11}, BlockType::DIRT),
    std::make_pair(quad{-7, 6, -11, -5, 6, -11, -7, 7, -11, -5, 7, -11}, BlockType::DIRT),
    std::make_pair(quad{6, 6, -11, 8, 6, -11, 6, 7, -11, 8, 7, -11}, BlockType::DIRT),
    std::make_pair(quad{-3, 3, -10, 4, 3, -10, -3, 4, -10, 4, 4, -10}, BlockType::DIRT),
    std::make_pair(quad{-5, 4, -10, -3, 4, -10, -5, 5, -10, -3, 5, -10}, BlockType::DIRT),
    std::make_pair(quad{4, 4, -10, 6, 4, -10, 4, 5, -10, 6, 5, -10}, BlockType::DIRT),
    std::make_pair(quad{-7, 5, -10, -5, 5, -10, -7, 6, -10, -5, 6, -10}, BlockType::DIRT),
    std::make_pair(quad{6, 5, -10, 8, 5, -10, 6, 6, -10, 8, 6, -10}, BlockType::DIRT),
    std::make_pair(quad{-8, 6, -10, -7, 6, -10, -8, 7, -10, -7, 7, -10}, BlockType::DIRT),
    std::make_pair(quad{8, 6, -10, 9, 6, -10, 8, 7, -10, 9, 7, -10}, BlockType::DIRT),
    std::make_pair(quad{-2, 2, -9, 3, 2, -9, -2, 3, -9, 3, 3, -9}, BlockType::DIRT),
    std::make_pair(quad{-5, 3, -9, -3, 3, -9, -5, 4, -9, -3, 4, -9}, BlockType::DIRT),
    std::make_pair(quad{4, 3, -9, 6, 3, -9, 4, 4, -9, 6, 4, -9}, BlockType::DIRT),
    std::make_pair(quad{-7, 4, -9, -5, 4, -9, -7, 5, -9, -5, 5, -9}, BlockType::DIRT),
    std::make_pair(quad{6, 4, -9, 8, 4, -9, 6, 5, -9, 8, 5, -9}, BlockType::DIRT),
    std::make_pair(quad{-8, 5, -9, -7, 5, -9, -8, 6, -9, -7, 6, -9}, BlockType::DIRT),
    std::make_pair(quad{8, 5, -9, 9, 5, -9, 8, 6, -9, 9, 6, -9}, BlockType::DIRT),
    std::make_pair(quad{-9, 6, -9, -8, 6, -9, -9, 7, -9, -8, 7, -9}, BlockType::DIRT),
    std::make_pair(quad{9, 6, -9, 10, 6, -9, 9, 7, -9, 10, 7, -9}, BlockType::DIRT),
    std::make_pair(quad{-4, 2, -8, -2, 2, -8, -4, 3, -8, -2, 3, -8}, BlockType::DIRT),
    std::make_pair(quad{3, 2, -8, 5, 2, -8, 3, 3, -8, 5, 3, -8}, BlockType::DIRT),
    std::make_pair(quad{-6, 3, -8, -5, 3, -8, -6, 4, -8, -5, 4, -8}, BlockType::DIRT),
    std::make_pair(quad{6, 3, -8, 7, 3, -8, 6, 4, -8, 7, 4, -8}, BlockType::DIRT),
    std::make_pair(quad{-8, 4, -8, -7, 4, -8, -8, 5, -8, -7, 5, -8}, BlockType::DIRT),
    std::make_pair(quad{8, 4, -8, 9, 4, -8, 8, 5, -8, 9, 5, -8}, BlockType::DIRT),
    std::make_pair(quad{-9, 5, -8, -8, 5, -8, -9, 6, -8, -8, 6, -8}, BlockType::DIRT),
    std::make_pair(quad{9, 5, -8, 10, 5, -8, 9, 6, -8, 10, 6, -8}, BlockType::DIRT),
    std::make_pair(quad{-10, 6, -8, -9, 6, -8, -10, 7, -8, -9, 7, -8}, BlockType::DIRT),
    std::make_pair(quad{10, 6, -8, 11, 6, -8, 10, 7, -8, 11, 7, -8}, BlockType::DIRT),
    std::make_pair(quad{-3, 1, -7, 4, 1, -7, -3, 2, -7, 4, 2, -7}, BlockType::DIRT),
    std::make_pair(quad{-6, 2, -7, -4, 2, -7, -6, 3, -7, -4, 3, -7}, BlockType::DIRT),
    std::make_pair(quad{5, 2, -7, 7, 2, -7, 5, 3, -7, 7, 3, -7}, BlockType::DIRT),
    std::make_pair(quad{-7, 3, -7, -6, 3, -7, -7, 4, -7, -6, 4, -7}, BlockType::DIRT),
    std::make_pair(quad{7, 3, -7, 8, 3, -7, 7, 4, -7, 8, 4, -7}, BlockType::DIRT),
    std::make_pair(quad{-9, 4, -7, -8, 4, -7, -9, 5, -7, -8, 5, -7}, BlockType::DIRT),
    std::make_pair(quad{9, 4, -7, 10, 4, -7, 9, 5, -7, 10, 5, -7}, BlockType::DIRT),
    std::make_pair(quad{-10, 5, -7, -9, 5, -7, -10, 6, -7, -9, 6, -7}, BlockType::DIRT),
    std::make_pair(quad{10, 5, -7, 11, 5, -7, 10, 6, -7, 11, 6, -7}, BlockType::DIRT),
    std::make_pair(quad{-11, 6, -7, -10, 6, -7, -11, 7, -7, -10, 7, -7}, BlockType::DIRT),
    std::make_pair(quad{11, 6, -7, 12, 6, -7, 11, 7, -7, 12, 7, -7}, BlockType::DIRT),
    std::make_pair(quad{-4, 1, -6, -3, 1, -6, -4, 2, -6, -3, 2, -6}, BlockType::DIRT),
    std::make_pair(quad{4, 1, -6, 5, 1, -6, 4, 2, -6, 5, 2, -6}, BlockType::DIRT),
    std::make_pair(quad{-7, 2, -6, -6, 2, -6, -7, 3, -6, -6, 3, -6}, BlockType::DIRT),
    std::make_pair(quad{7, 2, -6, 8, 2, -6, 7, 3, -6, 8, 3, -6}, BlockType::DIRT),
    std::make_pair(quad{-8, 3, -6, -7, 3, -6, -8, 4, -6, -7, 4, -6}, BlockType::DIRT),
    std::make_pair(quad{8, 3, -6, 9, 3, -6, 8, 4, -6, 9, 4, -6}, BlockType::DIRT),
    std::make_pair(quad{-2, 0, -5, 3, 0, -5, -2, 1, -5, 3, 1, -5}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, -5, -4, 1, -5, -5, 2, -5, -4, 2, -5}, BlockType::DIRT),
    std::make_pair(quad{5, 1, -5, 6, 1, -5, 5, 2, -5, 6, 2, -5}, BlockType::DIRT),
    std::make_pair(quad{-9, 3, -5, -8, 3, -5, -9, 4, -5, -8, 4, -5}, BlockType::DIRT),
    std::make_pair(quad{9, 3, -5, 10, 3, -5, 9, 4, -5, 10, 4, -5}, BlockType::DIRT),
    std::make_pair(quad{-10, 4, -5, -9, 4, -5, -10, 5, -5, -9, 5, -5}, BlockType::DIRT),
    std::make_pair(quad{10, 4, -5, 11, 4, -5, 10, 5, -5, 11, 5, -5}, BlockType::DIRT),
    std::make_pair(quad{-11, 5, -5, -10, 5, -5, -11, 6, -5, -10, 6, -5}, BlockType::DIRT),
    std::make_pair(quad{11, 5, -5, 12, 5, -5, 11, 6, -5, 12, 6, -5}, BlockType::DIRT),
    std::make_pair(quad{-12, 6, -5, -11, 6, -5, -12, 7, -5, -11, 7, -5}, BlockType::DIRT),
    std::make_pair(quad{12, 6, -5, 13, 6, -5, 12, 7, -5, 13, 7, -5}, BlockType::DIRT),
    std::make_pair(quad{-3, 0, -4, -2, 0, -4, -3, 1, -4, -2, 1, -4}, BlockType::DIRT),
    std::make_pair(quad{3, 0, -4, 4, 0, -4, 3, 1, -4, 4, 1, -4}, BlockType::DIRT),
    std::make_pair(quad{-6, 1, -4, -5, 1, -4, -6, 2, -4, -5, 2, -4}, BlockType::DIRT),
    std::make_pair(quad{6, 1, -4, 7, 1, -4, 6, 2, -4, 7, 2, -4}, BlockType::DIRT),
    std::make_pair(quad{-8, 2, -4, -7, 2, -4, -8, 3, -4, -7, 3, -4}, BlockType::DIRT),
    std::make_pair(quad{8, 2, -4, 9, 2, -4, 8, 3, -4, 9, 3, -4}, BlockType::DIRT),
    std::make_pair(quad{-4, 0, -3, -3, 0, -3, -4, 1, -3, -3, 1, -3}, BlockType::DIRT),
    std::make_pair(quad{4, 0, -3, 5, 0, -3, 4, 1, -3, 5, 1, -3}, BlockType::DIRT),
    std::make_pair(quad{-7, 1, -3, -6, 1, -3, -7, 2, -3, -6, 2, -3}, BlockType::DIRT),
    std::make_pair(quad{7, 1, -3, 8, 1, -3, 7, 2, -3, 8, 2, -3}, BlockType::DIRT),
    std::make_pair(quad{-10, 3, -3, -9, 3, -3, -10, 4, -3, -9, 4, -3}, BlockType::DIRT),
    std::make_pair(quad{10, 3, -3, 11, 3, -3, 10, 4, -3, 11, 4, -3}, BlockType::DIRT),
    std::make_pair(quad{-11, 4, -3, -10, 4, -3, -11, 5, -3, -10, 5, -3}, BlockType::DIRT),
    std::make_pair(quad{11, 4, -3, 12, 4, -3, 11, 5, -3, 12, 5, -3}, BlockType::DIRT),
    std::make_pair(quad{-12, 5, -3, -11, 5, -3, -12, 6, -3, -11, 6, -3}, BlockType::DIRT),
    std::make_pair(quad{12, 5, -3, 13, 5, -3, 12, 6, -3, 13, 6, -3}, BlockType::DIRT),
    std::make_pair(quad{-5, 0, -2, -4, 0, -2, -5, 1, -2, -4, 1, -2}, BlockType::DIRT),
    std::make_pair(quad{5, 0, -2, 6, 0, -2, 5, 1, -2, 6, 1, -2}, BlockType::DIRT),
    std::make_pair(quad{-9, 2, -2, -8, 2, -2, -9, 3, -2, -8, 3, -2}, BlockType::DIRT),
    std::make_pair(quad{9, 2, -2, 10, 2, -2, 9, 3, -2, 10, 3, -2}, BlockType::DIRT),
    std::make_pair(quad{-13, 6, -2, -12, 6, -2, -13, 7, -2, -12, 7, -2}, BlockType::DIRT),
    std::make_pair(quad{13, 6, -2, 14, 6, -2, 13, 7, -2, 14, 7, -2}, BlockType::DIRT),
    std::make_pair(quad{-5, 0, 3, -4, 0, 3, -5, 1, 3, -4, 1, 3}, BlockType::DIRT),
    std::make_pair(quad{5, 0, 3, 6, 0, 3, 5, 1, 3, 6, 1, 3}, BlockType::DIRT),
    std::make_pair(quad{-9, 2, 3, -8, 2, 3, -9, 3, 3, -8, 3, 3}, BlockType::DIRT),
    std::make_pair(quad{9, 2, 3, 10, 2, 3, 9, 3, 3, 10, 3, 3}, BlockType::DIRT),
    std::make_pair(quad{-13, 6, 3, -12, 6, 3, -13, 7, 3, -12, 7, 3}, BlockType::DIRT),
    std::make_pair(quad{13, 6, 3, 14, 6, 3, 13, 7, 3, 14, 7, 3}, BlockType::DIRT),
    std::make_pair(quad{-4, 0, 4, -3, 0, 4, -4, 1, 4, -3, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{4, 0, 4, 5, 0, 4, 4, 1, 4, 5, 1, 4}, BlockType::DIRT),
    std::make_pair(quad{-7, 1, 4, -6, 1, 4, -7, 2, 4, -6, 2, 4}, BlockType::DIRT),
    std::make_pair(quad{7, 1, 4, 8, 1, 4, 7, 2, 4, 8, 2, 4}, BlockType::DIRT),
    std::make_pair(quad{-10, 3, 4, -9, 3, 4, -10, 4, 4, -9, 4, 4}, BlockType::DIRT),
    std::make_pair(quad{10, 3, 4, 11, 3, 4, 10, 4, 4, 11, 4, 4}, BlockType::DIRT),
    std::make_pair(quad{-11, 4, 4, -10, 4, 4, -11, 5, 4, -10, 5, 4}, BlockType::DIRT),
    std::make_pair(quad{11, 4, 4, 12, 4, 4, 11, 5, 4, 12, 5, 4}, BlockType::DIRT),
    std::make_pair(quad{-12, 5, 4, -11, 5, 4, -12, 6, 4, -11, 6, 4}, BlockType::DIRT),
    std::make_pair(quad{12, 5, 4, 13, 5, 4, 12, 6, 4, 13, 6, 4}, BlockType::DIRT),
    std::make_pair(quad{-3, 0, 5, -2, 0, 5, -3, 1, 5, -2, 1, 5}, BlockType::DIRT),
    std::make_pair(quad{3, 0, 5, 4, 0, 5, 3, 1, 5, 4, 1, 5}, BlockType::DIRT),
    std::make_pair(quad{-6, 1, 5, -5, 1, 5, -6, 2, 5, -5, 2, 5}, BlockType::DIRT),
    std::make_pair(quad{6, 1, 5, 7, 1, 5, 6, 2, 5, 7, 2, 5}, BlockType::DIRT),
    std::make_pair(quad{-8, 2, 5, -7, 2, 5, -8, 3, 5, -7, 3, 5}, BlockType::DIRT),
    std::make_pair(quad{8, 2, 5, 9, 2, 5, 8, 3, 5, 9, 3, 5}, BlockType::DIRT),
    std::make_pair(quad{-2, 0, 6, 3, 0, 6, -2, 1, 6, 3, 1, 6}, BlockType::DIRT),
    std::make_pair(quad{-5, 1, 6, -4, 1, 6, -5, 2, 6, -4, 2, 6}, BlockType::DIRT),
    std::make_pair(quad{5, 1, 6, 6, 1, 6, 5, 2, 6, 6, 2, 6}, BlockType::DIRT),
    std::make_pair(quad{-9, 3, 6, -8, 3, 6, -9, 4, 6, -8, 4, 6}, BlockType::DIRT),
    std::make_pair(quad{9, 3, 6, 10, 3, 6, 9, 4, 6, 10, 4, 6}, BlockType::DIRT),
    std::make_pair(quad{-10, 4, 6, -9, 4, 6, -10, 5, 6, -9, 5, 6}, BlockType::DIRT),
    std::make_pair(quad{10, 4, 6, 11, 4, 6, 10, 5, 6, 11, 5, 6}, BlockType::DIRT),
    std::make_pair(quad{-11, 5, 6, -10, 5, 6, -11, 6, 6, -10, 6, 6}, BlockType::DIRT),
    std::make_pair(quad{11, 5, 6, 12, 5, 6, 11, 6, 6, 12, 6, 6}, BlockType::DIRT),
    std::make_pair(quad{-12, 6, 6, -11, 6, 6, -12, 7, 6, -11, 7, 6}, BlockType::DIRT),
    std::make_pair(quad{12, 6, 6, 13, 6, 6, 12, 7, 6, 13, 7, 6}, BlockType::DIRT),
    std::make_pair(quad{-4, 1, 7, -3, 1, 7, -4, 2, 7, -3, 2, 7}, BlockType::DIRT),
    std::make_pair(quad{4, 1, 7, 5, 1, 7, 4, 2, 7, 5, 2, 7}, BlockType::DIRT),
    std::make_pair(quad{-7, 2, 7, -6, 2, 7, -7, 3, 7, -6, 3, 7}, BlockType::DIRT),
    std::make_pair(quad{7, 2, 7, 8, 2, 7, 7, 3, 7, 8, 3, 7}, BlockType::DIRT),
    std::make_pair(quad{-8, 3, 7, -7, 3, 7, -8, 4, 7, -7, 4, 7}, BlockType::DIRT),
    std::make_pair(quad{8, 3, 7, 9, 3, 7, 8, 4, 7, 9, 4, 7}, BlockType::DIRT),
    std::make_pair(quad{-3, 1, 8, 4, 1, 8, -3, 2, 8, 4, 2, 8}, BlockType::DIRT),
    std::make_pair(quad{-6, 2, 8, -4, 2, 8, -6, 3, 8, -4, 3, 8}, BlockType::DIRT),
    std::make_pair(quad{5, 2, 8, 7, 2, 8, 5, 3, 8, 7, 3, 8}, BlockType::DIRT),
    std::make_pair(quad{-7, 3, 8, -6, 3, 8, -7, 4, 8, -6, 4, 8}, BlockType::DIRT),
    std::make_pair(quad{7, 3, 8, 8, 3, 8, 7, 4, 8, 8, 4, 8}, BlockType::DIRT),
    std::make_pair(quad{-9, 4, 8, -8, 4, 8, -9, 5, 8, -8, 5, 8}, BlockType::DIRT),
    std::make_pair(quad{9, 4, 8, 10, 4, 8, 9, 5, 8, 10, 5, 8}, BlockType::DIRT),
    std::make_pair(quad{-10, 5, 8, -9, 5, 8, -10, 6, 8, -9, 6, 8}, BlockType::DIRT),
    std::make_pair(quad{10, 5, 8, 11, 5, 8, 10, 6, 8, 11, 6, 8}, BlockType::DIRT),
    std::make_pair(quad{-11, 6, 8, -10, 6, 8, -11, 7, 8, -10, 7, 8}, BlockType::DIRT),
    std::make_pair(quad{11, 6, 8, 12, 6, 8, 11, 7, 8, 12, 7, 8}, BlockType::DIRT),
    std::make_pair(quad{-4, 2, 9, -2, 2, 9, -4, 3, 9, -2, 3, 9}, BlockType::DIRT),
    std::make_pair(quad{3, 2, 9, 5, 2, 9, 3, 3, 9, 5, 3, 9}, BlockType::DIRT),
    std::make_pair(quad{-6, 3, 9, -5, 3, 9, -6, 4, 9, -5, 4, 9}, BlockType::DIRT),
    std::make_pair(quad{6, 3, 9, 7, 3, 9, 6, 4, 9, 7, 4, 9}, BlockType::DIRT),
    std::make_pair(quad{-8, 4, 9, -7, 4, 9, -8, 5, 9, -7, 5, 9}, BlockType::DIRT),
    std::make_pair(quad{8, 4, 9, 9, 4, 9, 8, 5, 9, 9, 5, 9}, BlockType::DIRT),
    std::make_pair(quad{-9, 5, 9, -8, 5, 9, -9, 6, 9, -8, 6, 9}, BlockType::DIRT),
    std::make_pair(quad{9, 5, 9, 10, 5, 9, 9, 6, 9, 10, 6, 9}, BlockType::DIRT),
    std::make_pair(quad{-10, 6, 9, -9, 6, 9, -10, 7, 9, -9, 7, 9}, BlockType::DIRT),
    std::make_pair(quad{10, 6, 9, 11, 6, 9, 10, 7, 9, 11, 7, 9}, BlockType::DIRT),
    std::make_pair(quad{-2, 2, 10, 3, 2, 10, -2, 3, 10, 3, 3, 10}, BlockType::DIRT),
    std::make_pair(quad{-5, 3, 10, -3, 3, 10, -5, 4, 10, -3, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{4, 3, 10, 6, 3, 10, 4, 4, 10, 6, 4, 10}, BlockType::DIRT),
    std::make_pair(quad{-7, 4, 10, -5, 4, 10, -7, 5, 10, -5, 5, 10}, BlockType::DIRT),
    std::make_pair(quad{6, 4, 10, 8, 4, 10, 6, 5, 10, 8, 5, 10}, BlockType::DIRT),
    std::make_pair(quad{-8, 5, 10, -7, 5, 10, -8, 6, 10, -7, 6, 10}, BlockType::DIRT),
    std::make_pair(quad{8, 5, 10, 9, 5, 10, 8, 6, 10, 9, 6, 10}, BlockType::DIRT),
    std::make_pair(quad{-9, 6, 10, -8, 6, 10, -9, 7, 10, -8, 7, 10}, BlockType::DIRT),
    std::make_pair(quad{9, 6, 10, 10, 6, 10, 9, 7, 10, 10, 7, 10}, BlockType::DIRT),
    std::make_pair(quad{-3, 3, 11, 4, 3, 11, -3, 4, 11, 4, 4, 11}, BlockType::DIRT),
    std::make_pair(quad{-5, 4, 11, -3, 4, 11, -5, 5, 11, -3, 5, 11}, BlockType::DIRT),
    std::make_pair(quad{4, 4, 11, 6, 4, 11, 4, 5, 11, 6, 5, 11}, BlockType::DIRT),
    std::make_pair(quad{-7, 5, 11, -5, 5, 11, -7, 6, 11, -5, 6, 11}, BlockType::DIRT),
    std::make_pair(quad{6, 5, 11, 8, 5, 11, 6, 6, 11, 8, 6, 11}, BlockType::DIRT),
    std::make_pair(quad{-8, 6, 11, -7, 6, 11, -8, 7, 11, -7, 7, 11}, BlockType::DIRT),
    std::make_pair(quad{8, 6, 11, 9, 6, 11, 8, 7, 11, 9, 7, 11}, BlockType::DIRT),
    std::make_pair(quad{-3, 4, 12, 4, 4, 12, -3, 5, 12, 4, 5, 12}, BlockType::DIRT),
    std::make_pair(quad{-5, 5, 12, -3, 5, 12, -5, 6, 12, -3, 6, 12}, BlockType::DIRT),
    std::make_pair(quad{4, 5, 12, 6, 5, 12, 4, 6, 12, 6, 6, 12}, BlockType::DIRT),
    std::make_pair(quad{-7, 6, 12, -5, 6, 12, -7, 7, 12, -5, 7, 12}, BlockType::DIRT),
    std::make_pair(quad{6, 6, 12, 8, 6, 12, 6, 7, 12, 8, 7, 12}, BlockType::DIRT),
    std::make_pair(quad{-3, 5, 13, 4, 5, 13, -3, 6, 13, 4, 6, 13}, BlockType::DIRT),
    std::make_pair(quad{-5, 6, 13, -2, 6, 13, -5, 7, 13, -2, 7, 13}, BlockType::DIRT),
    std::make_pair(quad{3, 6, 13, 6, 6, 13, 3, 7, 13, 6, 7, 13}, BlockType::DIRT),
    std::make_pair(quad{-2, 6, 14, 3, 6, 14, -2, 7, 14, 3, 7, 14}, BlockType::DIRT),
  };

  BOOST_TEST(std::is_permutation(actual.begin(), actual.end(), expected.begin()));
}
